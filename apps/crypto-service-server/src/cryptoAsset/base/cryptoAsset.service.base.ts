/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CryptoAsset as PrismaCryptoAsset } from "@prisma/client";

export class CryptoAssetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CryptoAssetCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cryptoAsset.count(args);
  }

  async cryptoAssets<T extends Prisma.CryptoAssetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptoAssetFindManyArgs>
  ): Promise<PrismaCryptoAsset[]> {
    return this.prisma.cryptoAsset.findMany<Prisma.CryptoAssetFindManyArgs>(
      args
    );
  }
  async cryptoAsset<T extends Prisma.CryptoAssetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptoAssetFindUniqueArgs>
  ): Promise<PrismaCryptoAsset | null> {
    return this.prisma.cryptoAsset.findUnique(args);
  }
  async createCryptoAsset<T extends Prisma.CryptoAssetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptoAssetCreateArgs>
  ): Promise<PrismaCryptoAsset> {
    return this.prisma.cryptoAsset.create<T>(args);
  }
  async updateCryptoAsset<T extends Prisma.CryptoAssetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptoAssetUpdateArgs>
  ): Promise<PrismaCryptoAsset> {
    return this.prisma.cryptoAsset.update<T>(args);
  }
  async deleteCryptoAsset<T extends Prisma.CryptoAssetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptoAssetDeleteArgs>
  ): Promise<PrismaCryptoAsset> {
    return this.prisma.cryptoAsset.delete(args);
  }
}
