/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CryptoAssetService } from "../cryptoAsset.service";
import { CryptoAssetCreateInput } from "./CryptoAssetCreateInput";
import { CryptoAsset } from "./CryptoAsset";
import { CryptoAssetFindManyArgs } from "./CryptoAssetFindManyArgs";
import { CryptoAssetWhereUniqueInput } from "./CryptoAssetWhereUniqueInput";
import { CryptoAssetUpdateInput } from "./CryptoAssetUpdateInput";

export class CryptoAssetControllerBase {
  constructor(protected readonly service: CryptoAssetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CryptoAsset })
  async createCryptoAsset(
    @common.Body() data: CryptoAssetCreateInput
  ): Promise<CryptoAsset> {
    return await this.service.createCryptoAsset({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CryptoAsset] })
  @ApiNestedQuery(CryptoAssetFindManyArgs)
  async cryptoAssets(@common.Req() request: Request): Promise<CryptoAsset[]> {
    const args = plainToClass(CryptoAssetFindManyArgs, request.query);
    return this.service.cryptoAssets({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CryptoAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cryptoAsset(
    @common.Param() params: CryptoAssetWhereUniqueInput
  ): Promise<CryptoAsset | null> {
    const result = await this.service.cryptoAsset({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CryptoAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCryptoAsset(
    @common.Param() params: CryptoAssetWhereUniqueInput,
    @common.Body() data: CryptoAssetUpdateInput
  ): Promise<CryptoAsset | null> {
    try {
      return await this.service.updateCryptoAsset({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CryptoAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCryptoAsset(
    @common.Param() params: CryptoAssetWhereUniqueInput
  ): Promise<CryptoAsset | null> {
    try {
      return await this.service.deleteCryptoAsset({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
