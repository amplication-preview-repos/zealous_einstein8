/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { MarketDataService } from "../marketData.service";
import { MarketDataCreateInput } from "./MarketDataCreateInput";
import { MarketData } from "./MarketData";
import { MarketDataFindManyArgs } from "./MarketDataFindManyArgs";
import { MarketDataWhereUniqueInput } from "./MarketDataWhereUniqueInput";
import { MarketDataUpdateInput } from "./MarketDataUpdateInput";

export class MarketDataControllerBase {
  constructor(protected readonly service: MarketDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MarketData })
  async createMarketData(
    @common.Body() data: MarketDataCreateInput
  ): Promise<MarketData> {
    return await this.service.createMarketData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MarketData] })
  @ApiNestedQuery(MarketDataFindManyArgs)
  async marketDataItems(@common.Req() request: Request): Promise<MarketData[]> {
    const args = plainToClass(MarketDataFindManyArgs, request.query);
    return this.service.marketDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MarketData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async marketData(
    @common.Param() params: MarketDataWhereUniqueInput
  ): Promise<MarketData | null> {
    const result = await this.service.marketData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MarketData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateMarketData(
    @common.Param() params: MarketDataWhereUniqueInput,
    @common.Body() data: MarketDataUpdateInput
  ): Promise<MarketData | null> {
    try {
      return await this.service.updateMarketData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MarketData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteMarketData(
    @common.Param() params: MarketDataWhereUniqueInput
  ): Promise<MarketData | null> {
    try {
      return await this.service.deleteMarketData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
