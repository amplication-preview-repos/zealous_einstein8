/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserPortfolioService } from "../userPortfolio.service";
import { UserPortfolioCreateInput } from "./UserPortfolioCreateInput";
import { UserPortfolio } from "./UserPortfolio";
import { UserPortfolioFindManyArgs } from "./UserPortfolioFindManyArgs";
import { UserPortfolioWhereUniqueInput } from "./UserPortfolioWhereUniqueInput";
import { UserPortfolioUpdateInput } from "./UserPortfolioUpdateInput";

export class UserPortfolioControllerBase {
  constructor(protected readonly service: UserPortfolioService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserPortfolio })
  async createUserPortfolio(
    @common.Body() data: UserPortfolioCreateInput
  ): Promise<UserPortfolio> {
    return await this.service.createUserPortfolio({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserPortfolio] })
  @ApiNestedQuery(UserPortfolioFindManyArgs)
  async userPortfolios(
    @common.Req() request: Request
  ): Promise<UserPortfolio[]> {
    const args = plainToClass(UserPortfolioFindManyArgs, request.query);
    return this.service.userPortfolios({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserPortfolio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userPortfolio(
    @common.Param() params: UserPortfolioWhereUniqueInput
  ): Promise<UserPortfolio | null> {
    const result = await this.service.userPortfolio({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserPortfolio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserPortfolio(
    @common.Param() params: UserPortfolioWhereUniqueInput,
    @common.Body() data: UserPortfolioUpdateInput
  ): Promise<UserPortfolio | null> {
    try {
      return await this.service.updateUserPortfolio({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserPortfolio })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserPortfolio(
    @common.Param() params: UserPortfolioWhereUniqueInput
  ): Promise<UserPortfolio | null> {
    try {
      return await this.service.deleteUserPortfolio({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
